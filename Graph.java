/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-14")
public class Graph implements org.apache.thrift.TBase<Graph, Graph._Fields>, java.io.Serializable, Cloneable, Comparable<Graph> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Graph");

  private static final org.apache.thrift.protocol.TField VERT_FIELD_DESC = new org.apache.thrift.protocol.TField("vert", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField AREST_FIELD_DESC = new org.apache.thrift.protocol.TField("arest", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GraphStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GraphTupleSchemeFactory();

  public java.util.List<Vertex> vert; // required
  public java.util.List<Edge> arest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERT((short)1, "vert"),
    AREST((short)2, "arest");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERT
          return VERT;
        case 2: // AREST
          return AREST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERT, new org.apache.thrift.meta_data.FieldMetaData("vert", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
    tmpMap.put(_Fields.AREST, new org.apache.thrift.meta_data.FieldMetaData("arest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edge.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Graph.class, metaDataMap);
  }

  public Graph() {
  }

  public Graph(
    java.util.List<Vertex> vert,
    java.util.List<Edge> arest)
  {
    this();
    this.vert = vert;
    this.arest = arest;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Graph(Graph other) {
    if (other.isSetVert()) {
      java.util.List<Vertex> __this__vert = new java.util.ArrayList<Vertex>(other.vert.size());
      for (Vertex other_element : other.vert) {
        __this__vert.add(new Vertex(other_element));
      }
      this.vert = __this__vert;
    }
    if (other.isSetArest()) {
      java.util.List<Edge> __this__arest = new java.util.ArrayList<Edge>(other.arest.size());
      for (Edge other_element : other.arest) {
        __this__arest.add(new Edge(other_element));
      }
      this.arest = __this__arest;
    }
  }

  public Graph deepCopy() {
    return new Graph(this);
  }

  @Override
  public void clear() {
    this.vert = null;
    this.arest = null;
  }

  public int getVertSize() {
    return (this.vert == null) ? 0 : this.vert.size();
  }

  public java.util.Iterator<Vertex> getVertIterator() {
    return (this.vert == null) ? null : this.vert.iterator();
  }

  public void addToVert(Vertex elem) {
    if (this.vert == null) {
      this.vert = new java.util.ArrayList<Vertex>();
    }
    this.vert.add(elem);
  }

  public java.util.List<Vertex> getVert() {
    return this.vert;
  }

  public Graph setVert(java.util.List<Vertex> vert) {
    this.vert = vert;
    return this;
  }

  public void unsetVert() {
    this.vert = null;
  }

  /** Returns true if field vert is set (has been assigned a value) and false otherwise */
  public boolean isSetVert() {
    return this.vert != null;
  }

  public void setVertIsSet(boolean value) {
    if (!value) {
      this.vert = null;
    }
  }

  public int getArestSize() {
    return (this.arest == null) ? 0 : this.arest.size();
  }

  public java.util.Iterator<Edge> getArestIterator() {
    return (this.arest == null) ? null : this.arest.iterator();
  }

  public void addToArest(Edge elem) {
    if (this.arest == null) {
      this.arest = new java.util.ArrayList<Edge>();
    }
    this.arest.add(elem);
  }

  public java.util.List<Edge> getArest() {
    return this.arest;
  }

  public Graph setArest(java.util.List<Edge> arest) {
    this.arest = arest;
    return this;
  }

  public void unsetArest() {
    this.arest = null;
  }

  /** Returns true if field arest is set (has been assigned a value) and false otherwise */
  public boolean isSetArest() {
    return this.arest != null;
  }

  public void setArestIsSet(boolean value) {
    if (!value) {
      this.arest = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case VERT:
      if (value == null) {
        unsetVert();
      } else {
        setVert((java.util.List<Vertex>)value);
      }
      break;

    case AREST:
      if (value == null) {
        unsetArest();
      } else {
        setArest((java.util.List<Edge>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VERT:
      return getVert();

    case AREST:
      return getArest();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VERT:
      return isSetVert();
    case AREST:
      return isSetArest();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Graph)
      return this.equals((Graph)that);
    return false;
  }

  public boolean equals(Graph that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_vert = true && this.isSetVert();
    boolean that_present_vert = true && that.isSetVert();
    if (this_present_vert || that_present_vert) {
      if (!(this_present_vert && that_present_vert))
        return false;
      if (!this.vert.equals(that.vert))
        return false;
    }

    boolean this_present_arest = true && this.isSetArest();
    boolean that_present_arest = true && that.isSetArest();
    if (this_present_arest || that_present_arest) {
      if (!(this_present_arest && that_present_arest))
        return false;
      if (!this.arest.equals(that.arest))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetVert()) ? 131071 : 524287);
    if (isSetVert())
      hashCode = hashCode * 8191 + vert.hashCode();

    hashCode = hashCode * 8191 + ((isSetArest()) ? 131071 : 524287);
    if (isSetArest())
      hashCode = hashCode * 8191 + arest.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Graph other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetVert()).compareTo(other.isSetVert());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVert()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vert, other.vert);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArest()).compareTo(other.isSetArest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arest, other.arest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Graph(");
    boolean first = true;

    sb.append("vert:");
    if (this.vert == null) {
      sb.append("null");
    } else {
      sb.append(this.vert);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arest:");
    if (this.arest == null) {
      sb.append("null");
    } else {
      sb.append(this.arest);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GraphStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GraphStandardScheme getScheme() {
      return new GraphStandardScheme();
    }
  }

  private static class GraphStandardScheme extends org.apache.thrift.scheme.StandardScheme<Graph> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Graph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.vert = new java.util.ArrayList<Vertex>(_list8.size);
                Vertex _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new Vertex();
                  _elem9.read(iprot);
                  struct.vert.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setVertIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AREST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.arest = new java.util.ArrayList<Edge>(_list11.size);
                Edge _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new Edge();
                  _elem12.read(iprot);
                  struct.arest.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setArestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Graph struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.vert != null) {
        oprot.writeFieldBegin(VERT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vert.size()));
          for (Vertex _iter14 : struct.vert)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.arest != null) {
        oprot.writeFieldBegin(AREST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arest.size()));
          for (Edge _iter15 : struct.arest)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GraphTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GraphTupleScheme getScheme() {
      return new GraphTupleScheme();
    }
  }

  private static class GraphTupleScheme extends org.apache.thrift.scheme.TupleScheme<Graph> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Graph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVert()) {
        optionals.set(0);
      }
      if (struct.isSetArest()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVert()) {
        {
          oprot.writeI32(struct.vert.size());
          for (Vertex _iter16 : struct.vert)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetArest()) {
        {
          oprot.writeI32(struct.arest.size());
          for (Edge _iter17 : struct.arest)
          {
            _iter17.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Graph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.vert = new java.util.ArrayList<Vertex>(_list18.size);
          Vertex _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new Vertex();
            _elem19.read(iprot);
            struct.vert.add(_elem19);
          }
        }
        struct.setVertIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.arest = new java.util.ArrayList<Edge>(_list21.size);
          Edge _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new Edge();
            _elem22.read(iprot);
            struct.arest.add(_elem22);
          }
        }
        struct.setArestIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

